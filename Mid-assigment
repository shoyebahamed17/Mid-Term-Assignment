****************************************** Ans To The Question Nmuber 1 ****************************************************
******************************************* 1. Create the Library class: ***************************************************
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

class Library:
    book_list = []
    @classmethod
    def entry_book(self, book):
        self.book_list.append(book)
        print(f'Book Name: {book.title} by {book.author}')

book1 = Book('breaste bilaus', 'Humayun Ahmed')
book2 = Book('deganted Opera', 'Abdul Hakim')

Library.entry_book(book1)
Library.entry_book(book2)

for book in Library.book_list:
    print(f'Title: {book.title}, Author: {book.author}')


******************************************Ans To The Question Nmuber 2 ****************************************************
*******************************************2. Create the Book class: ******************************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability

    def __str__(self):
        if self.availability:
            availability_status = 'Available'
        else:
            availability_status = 'Unavailable'

        return f'Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Available: {availability_status}'

book1 = Book(101, 'breaste bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'deganted Opera', 'Abdul Hakim', False)

print(book1)
print(book2)


******************************************Ans To The Question Nmuber 3 ***************************************************
*******************************************3. Initialize Book Object: ****************************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability

class Library:
    book_list = []
    @classmethod
    def entry_book(self, book):
        self.book_list.append(book)
        print(f'Book Name: {book.title} by {book.author}')
    
book1 = Book(101, 'breaste bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'deganted Opera', 'Abdul Hakim', False)

library = Library()
print('Book List:')
library.entry_book(book1)
library.entry_book(book2)

******************************************Ans To The Question Nmuber 4 **************************************************
*******************************************4. Implement borrow_book() method: *******************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability
    
    def __str__(self):
        if self.availability:
            availability_status = 'Available'
        else:
            availability_status = 'Unavailable'

        return f'Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Available: {availability_status}'
    
    def borrow_book(self):
        if self.availability:
            self.availability = False
            print(f'available for borrowing {self.title} by {self.author}.')
        else:
            print(f'Sorry, {self.title} by {self.author} is currently unavailable.')

book1 = Book(101, 'breaste bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'deganted Opera', 'Abdul Hakim', False)

book1.borrow_book()
book2.borrow_book()

******************************************Ans To The Question Nmuber 5 **************************************************
*******************************************5. Implement return_book() method: *******************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability

    def __str__(self):
        if self.availability:
            availability_status = 'Available'
        else:
            availability_status = 'Unavailable'

        return f'Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Available: {availability_status}'
    
    def borrow_book(self):
        if self.availability:
            self.availability = False
            print(f'available for borrowing {self.title} by {self.author}.')
        else:
            print(f'Sorry, {self.title} by {self.author} is currently unavailable.')
    
    def return_book(self):
        if self.availability:
            print(f'Book Name: {self.title} by {self.author} is already in the library. No need to return it.')
        else:
            self.availability = True
            print(f'Book Name: {self.title} by {self.author} has been returned to the library.')

class Library:
    book_list = []
    @classmethod
    def entry_book(self, book):
        self.book_list.append(book)
        print(f'Book Name: {book.title} by {book.author}')

book1 = Book(101, 'Breaste Bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'Deganted Opera', 'Abdul Hakim', False)

Library.entry_book(book1)
Library.entry_book(book2)

print('Borrow and Return Books:')
book1.borrow_book() 
book1.return_book()  
book1.return_book()  
book2.return_book()  

******************************************Ans To The Question Nmuber 6 ****************************************************
*******************************************6. Implement view_book_info() method: *******************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability
    
    def __str__(self):
        if self.availability:
            availability_status = 'Available'
        else:
            availability_status = 'Unavailable'

        return f'Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Available: {availability_status}'
    
    def borrow_book(self):
        if self.availability:
            self.availability = False
            print(f'available for borrowing {self.title} by {self.author}.')
        else:
            print(f'Sorry, {self.title} by {self.author} is currently unavailable.')
    
    def return_book(self):
        if self.availability:
            print(f'Book Name: {self.title} by {self.author} is already in the library. No need to return it.')
        else:
            self.availability = True
            print(f'Book Name: {self.title} by {self.author} has been returned to the library.')

    def view_book_info(self):
        print(f'Book ID: {self.book_id}')
        print(f'Title: {self.title}')
        print(f'Author: {self.author}')
        print(f'Availability: {'Available' if self.availability else 'Unavailable'}')

book1 = Book(101, 'Breaste Bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'Deganted Opera', 'Abdul Hakim', False)

print('Book Details:')
book1.view_book_info()
print()
book2.view_book_info()

******************************************Ans To The Question Nmuber 7 **************************************************
*************************************************7. Menu System: ********************************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability

    def __str__(self):
        if self.availability:
            availability_status = 'Available'
        else:
            availability_status = 'Unavailable'

        return f'Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Available: {availability_status}'
    
    def borrow_book(self):
        if self.availability:
            self.availability = False
            print(f'available for borrowing {self.title} by {self.author}.')
        else:
            print(f'Sorry, {self.title} by {self.author} is currently unavailable.')
    
    def return_book(self):
        if self.availability:
            print(f'Book Name: {self.title} by {self.author} is already in the library. No need to return it.')
        else:
            self.availability = True
            print(f'Book Name: {self.title} by {self.author} has been returned to the library.')

    def view_book_info(self):
        print(f'Book ID: {self.book_id}')
        print(f'Title: {self.title}')
        print(f'Author: {self.author}')
        print(f'Availability: {'Available' if self.availability else 'Unavailable'}')

class Library:
    book_list = []
    @classmethod
    def entry_book(self, book):
        self.book_list.append(book)
        
    @classmethod
    def view_all_books(self):
        if self.book_list:
            print('Library Book List:')
            for book in self.book_list:
                book.view_book_info()
        else:
            print('No books in the library.')

    @classmethod
    def find_book_by_id(self, book_id):
        for book in self.book_list:
            if book.book_id == book_id:
                return book
        return None

book1 = Book(101, 'breaste bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'deganted Opera', 'Abdul Hakim', False)
book3 = Book(103, 'C++', 'Bjarne Stroustrup', True)
book4 = Book(104, 'Python', 'Guido van Rossum', True)

Library.entry_book(book1)
Library.entry_book(book2)
Library.entry_book(book3)
Library.entry_book(book4)

while True:
        try:
            choice = int(input('Enter your choice: '))
        except ValueError:
            print('Invalid Number! Please enter a valid Number.')
            continue

        if choice == 1:
            Library.view_all_books()

        elif choice == 2:
            try:
                book_id = int(input('Enter the Book ID to borrow: '))
                book = Library.find_book_by_id(book_id)
                if book:
                    book.borrow_book()
                else:
                    print('No book found with the given Book ID.')
            except ValueError:
                print('Invalid Book ID. Please enter a valid number.')

        elif choice == 3:
            try:
                book_id = int(input('Enter the Book ID to return: '))
                book = Library.find_book_by_id(book_id)
                if book:
                    book.return_book()
                else:
                    print('No book found with the given Book ID.')
            except ValueError:
                print('Invalid Book ID. Please enter a valid number.')

        elif choice == 4:
            print('Exiting the library system.')
            break

        else:
            print('Invalid choice! Please select a valid Number.')


******************************************Ans To The Question Nmuber 8 ****************************************************
*************************************************8. Error Handling: ********************************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.availability = availability

    def __str__(self):
        if self.availability:
            availability_status = 'Available'
        else:
            availability_status = 'Unavailable'

        return f'Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Available: {availability_status}'
    
    def borrow_book(self):
        if self.availability:
            self.availability = False
            print(f'available for borrowing {self.title} by {self.author}.')
        else:
            print(f'Sorry, {self.title} by {self.author} is currently unavailable.')
    
    def return_book(self):
        if self.availability:
            print(f'Book Name: {self.title} by {self.author} is already in the library. No need to return it.')
        else:
            self.availability = True
            print(f'Book Name: {self.title} by {self.author} has been returned to the library.')

    def view_book_info(self):
        print(f'Book ID: {self.book_id}')
        print(f'Title: {self.title}')
        print(f'Author: {self.author}')
        print(f'Availability: {'Available' if self.availability else 'Unavailable'}')

class Library:
    book_list = []
    @classmethod
    def entry_book(self, book):
        self.book_list.append(book)
        
    @classmethod
    def view_all_books(self):
        if self.book_list:
            print('Library Book List:')
            for book in self.book_list:
                book.view_book_info()
        else:
            print('No books in the library.')

    @classmethod
    def find_book_by_id(self, book_id):
        for book in self.book_list:
            if book.book_id == book_id:
                return book
        return None

book1 = Book(101, 'breaste bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'deganted Opera', 'Abdul Hakim', False)
book3 = Book(103, 'C++', 'Bjarne Stroustrup', True)
book4 = Book(104, 'Python', 'Guido van Rossum', True)

Library.entry_book(book1)
Library.entry_book(book2)
Library.entry_book(book3)
Library.entry_book(book4)

while True:
    try:
        choice = int(input('Enter your choice: '))
    except ValueError:
        print('Error: Invalid input! Please enter a valid number.')
        continue

    if choice == 1:
        Library.view_all_books()

    elif choice == 2:
        try:
            book_id = int(input('Enter the Book ID to borrow: '))
            book = Library.find_book_by_id(book_id)
            if book:
                try:
                    book.borrow_book()
                except Exception as e:
                    print(e)
            else:
                print(f'Error: No book found with Book ID {book_id}.')
        except ValueError:
            print('Error: Invalid Book ID. Please enter a valid number.')

    elif choice == 3:
        try:
            book_id = int(input('Enter the Book ID to return: '))
            book = Library.find_book_by_id(book_id)
            if book:
                try:
                    book.return_book()
                except Exception as e:
                    print(e)
            else:
                print(f'Error: No book found with Book ID {book_id}.')
        except ValueError:
            print('Error: Invalid Book ID. Please enter a valid number.')

    elif choice == 4:
        print('Exiting the library system.')
        break

    else:
        print('Error: Invalid choice! Please select a valid number.')

******************************************Ans To The Question Nmuber 9 ****************************************************
*************************************************9. Data Privacy **********************************************************
class Book:
    def __init__(self, book_id, title, author, availability=True):
        self.__book_id = book_id
        self.__title = title
        self.__author = author
        self.__availability = availability
    
    def __str__(self):
        if self.__availability:
            availability_status = 'Available'
        else:
            availability_status = 'Unavailable'

        return f'Book ID: {self.__book_id}, Title: {self.__title}, Author: {self.__author}, Available: {availability_status}'
    
    def borrow_book(self):
        if self.__availability:
            self.__availability = False
            print(f'available for borrowing {self.__title} by {self.__author}.')
        else:
            print(f'Sorry, {self.__title} by {self.__author} is currently unavailable.')
    
    def return_book(self):
        if self.__availability:
            print(f'Book Name: {self.__title} by {self.__author} is already in the library. No need to return it.')
        else:
            self.__availability = True
            print(f'Book Name: {self.__title} by {self.__author} has been returned to the library.')

    def view_book_info(self):
        print(f'Book ID: {self.__book_id}')
        print(f'Title: {self.__title}')
        print(f'Author: {self.__author}')
        print(f'Availability: {'Available' if self.__availability else 'Unavailable'}')

    def get_book_id(self):
        return self.__book_id

    def get_title(self):
        return self.__title

    def get_author(self):
        return self.__author

    def is_available(self):
        return self.__availability

    def set_availability(self, availability):
        if isinstance(availability, bool):
            self.__availability = availability
        else:
            raise ValueError("Availability must be a boolean.")

book1 = Book(101, 'Breaste Bilaus', 'Humayun Ahmed', True)
book2 = Book(102, 'Deganted Opera', 'Abdul Hakim', False)


print('Book Details:')
book1.view_book_info()
print()
book2.view_book_info()

print()
book1.borrow_book() 
book1.borrow_book()  

print()
book2.return_book() 
book2.return_book()








